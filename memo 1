URL https://github.com/makoto860/MEMO.git
個人アクセストークン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
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
日時を表示する方法。
<%= Date.current.strftime('%Y年 %m月 %d日') %>

スケジュールの合計を表示できるようにする。
application.html.erbで<h1>現在の日時：<%= Date.current.strftime("%Y年%m月%d日") %> スケジュール合計：<%= @users_count %></h1>
と記述する。

views/shared/_partial.html.erbに書く










日時を表示する(そのほか)
time_formats.rb
Date::DATE_FORMATS[:date_jp] = "%Y年%m月%d日"










-----------------------コントローラーの作成
rails g controller lessons hello



lessons_controller.rb

class LessonsController < ApplicationController
  def hello
    @hello = "こんにちは"
    @message = "helloアクションが実行されています"
  end
end










-----------------------ルーティング
routes.rb

Rails.application.routes.draw do
  get 'lessons/hello'
  # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
end



ルーティングを設定する基本の流れ
get 'lessons/hello', to: 'lessons#hello'



get 'lessons/hello',このURLの設定は
get 'lessons/hello', to: 'lessons#hello'
と同じ意味を持ちます。



routes.rb
get 'lessons/call', to: 'lessons#call'を追加する



root toの設定
#root :to => 'welcome#index'



lessons_controller.rb

    class LessonsController < ApplicationController
      def hello
        @hello = "こんにちは"
        @message = "helloアクションが実行されています"
      end
 
      def call
        @call = "callアクションが実行されています"
      end
    end



call.html.erbの作成
<h1>callアクションで表示されるページです</h1>
<p><%= @call %></p>










-------------------------------------------レイアウト
application.html.erb

    <!DOCTYPE html>
    <html>
      <head>
        <title>Myapp</title>
        <%= csrf_meta_tags %>
        <%= csp_meta_tag %>
 
        <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
        <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
      </head>
 
      <body>
        <header>
          <h1>Ruby on Rails</h1>
        </header>
        <%= yield %>
        <footer>
          <h1>Hello World!</h1>
        </footer>
      </body>
    </html>










---------------------------------------------------モデルとマイグレーション
rails g model User name:string email:string age:integer introduction:string
rails db:migrate
rails dbconsole
.tables
.schema テーブル名(例users)
Ctrl + zで終了する



createの処理
rails g controller (例users) index
users_controller.rbで記述する

class UsersController < ApplicationController
def index
end
# ここより下の各アクションを追加しましょう
def new
end

def create
end

def show
end

def edit
end

def update
end

def destroy
end
end

config/routes.rbに記述する

Rails.application.routes.draw do
  (省略)
  resources :users
end

rails routesをする



views/users/index.html.erbに記述する
<h3>ユーザー情報一覧</h3>
<table>
  <thead>
    <tr>
      <th>id</th>
      <th>名前</th>
      <th>メールアドレス</th>
      <th>年齢</th>
      <th>一言紹介</th>
      <th>更新日</th>
      <th>作成日</th>
    </tr>
  </thead>
 
  <tbody>
    <% @users.each do |user| %>
      <tr>
        <td><%= user.id %></td>
        <td><%= user.name %></td>
        <td><%= user.email %></td>
        <td><%= user.age %></td>
        <td><%= user.introduction %></td>
        <td><%= user.updated_at %></td>
        <td><%= user.created_at %></td>
      </tr>
      <% end %>
  </tbody>
</table>
<p><%= link_to "ユーザー新規登録", :new_user %></p>

common.scssを記述する
  （省略）
  table th {
        background-color: #fbc25b;
        padding: 10px 20px;
  }

  table td {
        background-color: #f9ecd5;
        padding: 10px 20px;
  }
 
  .notice {
        background-color: #ccf;
        padding: 5px;
  }
  
users_controller.rbに記述する

    class UsersController < ApplicationController
 
      def index
        @users = User.all
      end
 
      def new
        @user = User.new
      end
 
      def create
 
      end
    (省略)
    end    

/usersでアクセスする



new.html.erbを作成、記述する
<h3>ユーザー新規作成</h3>
<%= form_with model: @user do |f| %>
<table>
  <tr>
    <th><%= f.label :name ,"名前" %></th>
    <td><%= f.text_field :name %></td>
  </tr>

  <tr>
    <th><%= f.label :email ,"メールアドレス" %></th>
    <td><%= f.text_field :email %></td>
  </tr>

  <tr>
    <th><%= f.label :age ,"年齢" %></th>
    <td><%= f.text_field :age %></td>
  </tr>
 
  <tr>
      <th><%= f.label :introduction ,"一言紹介" %></th>
      <td><%= f.text_area :introduction %></td>
  </tr>
</table>
<div>
  <ul>
    <li><%= f.submit "登録完了する"%></li>
    <li><%= link_to "ユーザー情報一覧に戻る", :users %></li>
  </ul>
</div>
<% end %>

/users/newでアクセスする    



users_controller.rbに追加で記述する
(省略)
def create
  @user = User.new(params.require(:user).permit(:name, :email, :age, :introduction))
  if @user.save
    redirect_to :users
  else
    render "new"
  end
end
(省略)



フラッシュメッセージを作成する    
users_controller.rbに記述する
def create
  @user = User.new(params.require(:user).permit(:name, :email, :age, :introduction))
  if @user.save
    flash[:notice] = "ユーザーを新規登録しました"
    redirect_to :users
  else
    render "new"
  end
end

index.html.erb(フラッシュメッセージを追加)
<h3>ユーザー情報一覧</h3>
<% if flash[:notice] %>
  <p class="notice"><%= flash[:notice] %></p>
<% end %>

<table>
省略）



config/application.rbに日本時間を表示する設定を記述する
日本標準時に設定するコード
    config.time_zone = 'Tokyo'
    
config/application.rb

    require_relative 'boot'
 
    require 'rails/all'
 
    # Require the gems listed in Gemfile, including any gems
    # you've limited to :test, :development, or :production.
    Bundler.require(*Rails.groups)
 
    module Myapp
      class Application < Rails::Application
        # Initialize configuration defaults for originally generated Rails version.
        config.load_defaults 6.0
 
        # Settings in config/environments/* take precedence over those specified here.
        # Application configuration can go into files in config/initializers
        # -- all .rb files in that directory are automatically loaded after loading
        # the framework and any gems in your application.
        config.action_controller.permit_all_parameters = true
        config.time_zone = 'Tokyo' #ここに追加しましょう
      end
    end
    
サーバーを再起動させる



config/initializersにフォーマットのファイルを新規作成する

time_formats.rbに記述する

Time::DATE_FORMATS[:datetime_jp] = '%Y年 %m月%d日'
    
日時のフォーマットを指定するコード
.to_s(:datetime_jp)
    
index.hmtl.erbに記述する

    （省略）
 
    <tbody>
      <% @users.each do |user| %>
        <tr>
          <td><%= user.id %></td>
          <td><%= user.name %></td>
          <td><%= user.email %></td>
          <td><%= user.age %></td>
          <td><%= user.introduction %></td>
          <td><%= user.updated_at.to_s(:datetime_jp) %></td>
          <td><%= user.created_at.to_s(:datetime_jp) %></td>
        </tr>
      <% end %>
    </tbody>
 
    （省略）
    
時間と分を追加するフォーマット
Time::DATE_FORMATS[:datetime_jp] = '%Y年 %m月 %d日 %H時 %M分'










---------------------------------------CRUD処理のRead（読み込み）を実装する
index.hmtl.erbに記述する    

<th>参照</th>

<tr>
省略
<td><%= link_to "参照", user %></td>
</tr>



users_controller.rbに記述する
def show
  @user = User.find(params[:id])
end



show.html.erb作成して記述する
<h3>ユーザー詳細</h3>
<table>
  <tr>
    <th>名前</th>
    <td><%= @user.name %></td>
  </tr>
  <tr>
    <th>メールアドレス</th>
    <td><%= @user.email %></td>
  </tr>
  <tr>
    <th>年齢</th>
    <td><%= @user.age %></td>
  </tr>
  <tr>
    <th>一言紹介</th>
    <td><%= @user.introduction %></td>
  </tr>
</table>
<div>
  <ul>
    <li><%= link_to "ユーザー情報一覧に戻る", :users %></li>
  </ul>
</div>










edit.html.erb作成
<h3>ユーザー編集</h3>
<%= form_with model: @user do |f| %>
<table>
  <tr>
    <th><%= f.label :name ,"名前" %></th>
    <td><%= f.text_field :name %></td>
  </tr>
  <tr>
    <th><%= f.label :email ,"メールアドレス" %></th>
    <td><%= f.text_field :email %></td>
  </tr>
  <tr>
    <th><%= f.label :age ,"年齢" %></th>
    <td><%= f.text_field :age %></td>
  </tr>
  <tr>
    <th><%= f.label :introduction ,"一言紹介" %></th>
    <td><%= f.text_area :introduction %></td>
  </tr>
</table>
<div>
  <ul>
    <li><%= f.submit "編集を完了する" %></li>
    <li><%= link_to "ユーザー情報一覧に戻る", :users %></li>
  </ul>
</div>
<% end %>



users controllerに記述
def edit
  @user = User.find(params[:id])
end



def update
  @user = User.find(params[:id])
  if @user.update(params.require(:user).permit(:name, :email, :age, :introduction))
    flash[:notice] = "ユーザーIDが「#{@user.id}」の情報を更新しました"
    redirect_to :users
  else
    render "edit"
  end
end



users/index.html.erb    
<th>編集</th>

<td>
  <%= link_to "編集", [:edit, user] %>
</td>











users controller
def destroy
  @user = User.find(params[:id])
  @user.destroy
  flash[:notice] = "ユーザーを削除しました"
  redirect_to :users
end



index.html.erb
<th>削除</th>

<tr>
<td>
  <%= link_to "削除", user, method: :delete, data: { confirm: "本当に削除しますか？" } %>
</td>
</tr>









プルリクエストのやり方
実装用のブランチを切らずにmasterブランチに課題をpushしてしまったとき
【手順】

1. rails newで新規でアプリを作成する
2. 1で作成されたアプリのディレクトリへ移動する（cd コマンド）
3. git init を実行してgit 管理下に置く
4. git remote add でリモートリポジトリを設定する（GitHubのリポジトリは新しく作った方がわかりやすいです）
5. 現在のブランチが master ブランチであることを確認し、作成したリポジトリへpushする 
6. git checkout -b develop を実行し、ブランチを master からdevelopブランチに切り替える
7. developブランチに切り替わったことを確認し、現在のフォルダから .git 以外の全てのファイルを削除する
8. 今回実装していただいたRails課題のフォルダ配下の .git 以外の全てのファイルをコピーし、新しいフォルダ配下に格納する
9. developブランチをpushする
新しく作ったdevelopブランチからmasterブランチへ向けてPRを作成してください。



通常のpushの仕方
mkdir git_test
cd git_test
myappフォルダを中に入れる。
touch ファイル・フォルダ名
git init
$ git add　ファイル・フォルダ名
git status
$ git commit -m ""
git remote add origin url
$ git push origin master



git branch develop
git branch
git checkout develop(git checkout -b develop)
git branch
git add フォルダ
git status
git commit -m "git_prの練習-firstcommit"
git push origin develop
githubからcompure&pullrequestを押下する



プルリクエストの仕方
$ cd ~/environment
$ rails new task_app
$ cd task_app/
    
$ git add -A
$ git commit -m "initial commit"
$ git push -u origin master

git checkout -b develop



プルリク提出ポイント

1. githubに課題用のリポジトリをつくる(task_app)
2. rails newでアプリを新規作成する

    $ cd ~/environment
    $ rails new task_app
    $ cd task_app/

3. rails new をした直後にmasterブランチにコミット・プッシュする（それ以降は masterにはコミットしない )

    $ git add -A
    $ git commit -m "initial commit"
    $ git push -u origin master

developブランチにpushしてmaster ← developでプルリクを出します

4. 作業用ブランチ (develop)を作成する

    $ git checkout -b develop

5. developブランチで開発を行う(featureブランチは各自の判断で用意してください！)

ファイルを作成する。
git add scheduleTasks(フォルダ名)
fatal: pathspec 'scheduleTasks' did not match any files
ec2-user:~/environment/task_app (develop) $ git add -A　（フォルダのファイルを全て追加する）
ec2-user:~/environment/task_app (develop) $ git status　（追加フォルダが表示される）
On branch develop
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   app/views/scheduleTasks/edit.html.erb
        new file:   app/views/scheduleTasks/index.html.erb
        new file:   app/views/scheduleTasks/new.html.erb
        new file:   app/views/scheduleTasks/show.html.erb

git add ファイル名
git status
git commit -m "git-追加、修正"

6. git push origin developする



db/migrateファイルをpushするときに
 ! [rejected]        develop -> develop (fetch first)
error: failed to push some refs to 'https://github.com/makoto860/Schedule9TaskApp.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
のようになる。

ec2-user:~/environment/task_app (develop) $ git add （）
ec2-user:~/environment/task_app (develop) $ git add -A
ec2-user:~/environment/task_app (develop) $ git status

git commit -m "git-migrateの追加"
git push origin develop



解決法
Changes to be committed:
        deleted:    app/views/shared/_error.html.erb

このcommitを完了させないで次のファイルをgit addしたため拒否された。
git commit -m ""
git push push developまで完了させてから、他のファイルをgit addする。



ローカル確認をする方法
git clone
git checkout -b develop
git pull origin develop
bundle install
rails db:migrate
rails webpacker:install
rails s
でローカル確認










--------------------------------バリデーションの実装
スケジュールを登録できませんでした

終了日は今日以降の日付で選択してください

model/user.rb
    class User < ApplicationRecord
      validates :name, presence: true
      validates :email, uniqueness: true, presence: true
      validates :age, numericality: true
      validates :introduction, length: { in: 10..30 }
    end

users_controller.rb
    def create
      @user = User.new(params.require(:user).permit(:name, :email, :age, :introduction))
      #以下のsaveメソッドで保存がされません
      if @user.save
        flash[:notice] = "ユーザーを新規登録しました"
        redirect_to :users
      else
        #こちらの処理が実行されます。
        render "new"
      end
    end

view/shared/_error.html.erb
    <% if obj.errors.any? %>
      <% obj.errors.full_messages.each do |message| %>
        <ul>
          <li><%= message %></li>
        </ul>
      <% end %>
    <% end %>

views/users/new.html.erb
    <h3>ユーザー新規作成</h3>
 
    <%= render "shared/error", obj: @user %>　<!--ここを追加する-->
 
    <%= form_with model: @user do |f| %>
        <table>
    (省略)



バリデーション失敗時に画面が表示されないとき

errormessageの記述のミス

1. new.html.erbのrender "new"の後にstatus: :unprocessable_entityを使う

2. <views/shared/_error.html.erb>でerrors.any?ではなく、valid?を使う
<% if obj.errors.any? %>
<% unless obj.valid? %>を使うと解決できる。










rails serverを起動しようとすると "A server is already running."のエラーが表示されるときの対処法

$ lsof -i:3000
COMMAND  PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
ruby2.5 3033 vagrant   16u  IPv4  27499      0t0  TCP *:3000 (LISTEN)

$ kill -9 3033










デバック
Gemfile
    （省略）
 
    # Reduces boot times through caching; required in config/boot.rb
    gem 'bootsnap', '>= 1.4.2', require: false
    gem 'rails-i18n'
    gem 'pry-rails'
 
    （省略）
    
    
    
Gemfileに記述が完了しましたらbundle installを実行します。
Gemをインストールする
    bundle install



binding.pryを記述する。

log file:@schedule9

すでに使われている

END










エラーメッセージの日本語化
config/application.rbに記入
    require_relative 'boot'
 
    require 'rails/all'
 
    # Require the gems listed in Gemfile, including any gems
    # you've limited to :test, :development, or :production.
    Bundler.require(*Rails.groups)
 
    module Myapp
      class Application < Rails::Application
        # Initialize configuration defaults for originally generated Rails version.
        config.load_defaults 6.0
 
        # Settings in config/environments/* take precedence over those specified here.
        # Application configuration can go into files in config/initializers
        # -- all .rb files in that directory are automatically loaded after loading
        # the framework and any gems in your application.
        config.action_controller.permit_all_parameters = true
        config.i18n.default_locale = :ja
      end
    end


    
Gemfileに記入
    （省略）
 
    # Reduces boot times through caching; required in config/boot.rb
    gem 'bootsnap', '>= 1.4.2', require: false
    gem 'rails-i18n'
 
    （省略）

bundle installする



ymlファイルを作成し日本語の設定をする
config/locales/にja.ymlを作成する
ja:
  activerecord:
   models:
    user: ユーザー
   attributes:
    user:
     name: 名前
     email: メールアドレス
     age: 年齢
     introduction: 一言紹介
を記入する。     










終了日のエラーメッセージについて
final_date < first_dateここでfirst_dateとしているためですね。
Date.current　等で試してみてはいかがでしょうか？

class Schedule9 < ApplicationRecord
  validates :title, presence: true
  validates :first_date, presence: true
  validates :final_date, presence: true
  
  validate :final_date_after_today

  def final_date_after_today
    errors.add(:final_date,"は翌日以降の日にちを選択してください") if final_date < Date.tomorrow
  end
end










-----------------------------------------------全て無記入の時のエラーメッセージ

回答
undefined method `<' for nil:NilClass の意味は、 < のレシーバーである final_date が nil になっていることを意味しますので、

本当に final_date が nil になっているのか
なぜ nil になっているのか
本来であれば nil ではなくどのような値が入っているべきなのか
どうしたら期待する値が入るようになるのか

ここで出たエラーメッセージの後半にfor nil:NilClassとあるように、この変数にnilが入っていて、そしてnilには不等号の比較演算子がないので、NoMethodErrorとなります。
「nilなら0にしたい」というのであれば、current_price = get_price || 0のようにしましょう。



回答
errors.add(:final_date,"終了日は翌日以降の日にちを選択してください") if :final_date > Date.tomorrow
の前にbyebug (もしくはbinding.pry)と記述してデバッグコンソールに入って、final_date�����ついて調べてみてください。
また直接デバッグのコンソールにfinal_date < Date.tomorrowと打ち込んでどうなるか試しましょう。



回答
7行目に記載してあるbinding.pryは注目すべき点ではないです。
注目すべきは、def final_date_after_today内でとまったときのbinding.pryです。
7行目はどこにも属していない箇所（メソッド外）なので、おそらくファイルが読み込まれたタイミングでとまります。
重要なのは、9行目に止まったときの方です。

本当に final_date が nil になっているのか
なぜ nil になっているのか
本来であれば nil ではなくどのような値が入っているべきなのか
どうしたら期待する値が入るようになるのか

final_date_after_today＞ここがnil
エラー箇所　errors.add(:final_date, "終了日は翌日以降の日にちを選択してください") if final_date > Date.tomorrow

レシーバがnilまたはレシーバに指定しているプロパティが存在しないことが起因して表示されていることが多いです。
【確認ポイント】
・デバッグをしてレシーバの値を確認しましょう
・タイプミスしていないか確認しましょう（複数形・単数形・スペルミスなど）

undefined method 'XXX' for nil:NilClass 
というエラーが表示されている場合はレシーバの値がnil(何も入っていない)になっています。
Controllerで取得できているかをデバッグして確認してみましょう。



回答
エラーメッセージのundefined method '<' for nil:NilClassとは、「nilには< なんてメソッドは無いですよ」という内容になります。

つまり<のレシーバであるfinal_dateがnilになっています（これはデバッグで確認済みですね）。

なぜnilかと言えば、final_dateを含め「全て未入力」だからです。

従って、errors.add(:final_date,"は翌日以降の日にちを選択してください") if final_date < Date.tomorrowをする前に(一行上に)、

「final_dateがnilであれば実行しない」あるいは「final_dateがnilでなければ実行する」という条件をつける必要があります。

model/schedule9
class Schedule9 < ApplicationRecord
  validates :title, presence: true
  validates :first_date, presence: true
  validates :final_date, presence: true
  
  validate :final_date_after_today
  
  def final_date_after_today
    if final_date == nil
      errors.add(:final_date,"は翌日以降の日にちを選択して") 
    elsif final_date < Date.tomorrow
      errors.add(:final_date,"は翌日以降の日にちを選択して") 
    else
      "新規登録完了処理"
    end
  end
end

解決法はif文でメッセージを分岐させる      
